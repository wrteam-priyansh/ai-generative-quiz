from reportlab.lib.pagesizes import letter, A4
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, PageBreak
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch
from reportlab.lib.enums import TA_CENTER, TA_LEFT, TA_JUSTIFY
from typing import List, Dict, Any
from datetime import datetime
import io
import logging

from app.models.quiz import Question, QuestionType

logger = logging.getLogger(__name__)

class FileGenerationService:
    """Service for generating downloadable files from quiz questions"""
    
    @staticmethod
    def generate_txt_content(questions: List[Question], quiz_metadata: Dict[str, Any] = None) -> str:
        """Generate plain text content from quiz questions"""
        
        content = []
        
        # Header
        content.append("=" * 60)
        content.append("AI GENERATED QUIZ")
        content.append("=" * 60)
        content.append("")
        
        # Metadata
        if quiz_metadata:
            content.append(f"Generated: {quiz_metadata.get('generated_at', datetime.now().isoformat())}")
            content.append(f"Total Questions: {quiz_metadata.get('total_questions', len(questions))}")
            
            if quiz_metadata.get('difficulty_levels'):
                content.append(f"Difficulty Levels: {', '.join(quiz_metadata['difficulty_levels'])}")
            
            if quiz_metadata.get('topic'):
                content.append(f"Topic: {quiz_metadata['topic']}")
            
            content.append("")
        
        content.append("-" * 60)
        content.append("QUESTIONS")
        content.append("-" * 60)
        content.append("")
        
        # Questions
        for i, question in enumerate(questions, 1):
            content.append(f"Question {i}:")
            content.append(f"Type: {question.question_type.value.replace('_', ' ').title()}")
            content.append(f"Q: {question.question_text}")
            content.append("")
            
            if question.question_type == QuestionType.MULTIPLE_CHOICE and question.options:
                content.append("Options:")
                for j, option in enumerate(question.options):
                    marker = "✓" if option.is_correct else " "
                    letter = chr(65 + j)  # A, B, C, D
                    content.append(f"  {letter}) {option.text} {marker}")
                content.append("")
                
            elif question.question_type == QuestionType.TRUE_FALSE:
                correct_answer = question.correct_answer or "True"
                content.append("Options:")
                content.append(f"  A) True {'✓' if correct_answer.lower() == 'true' else ' '}")
                content.append(f"  B) False {'✓' if correct_answer.lower() == 'false' else ' '}")
                content.append("")
                
            elif question.question_type == QuestionType.OPEN_ENDED:
                if question.correct_answer:
                    content.append(f"Sample Answer: {question.correct_answer}")
                    content.append("")
            
            if question.explanation:
                content.append(f"Explanation: {question.explanation}")
                content.append("")
            
            content.append("-" * 40)
            content.append("")
        
        # Footer
        content.append("")
        content.append("=" * 60)
        content.append("Generated by AI Quiz Generator")
        content.append(f"https://your-app-domain.com")
        content.append("=" * 60)
        
        return "\n".join(content)
    
    @staticmethod
    def generate_pdf_content(questions: List[Question], quiz_metadata: Dict[str, Any] = None) -> bytes:
        """Generate PDF content from quiz questions"""
        
        buffer = io.BytesIO()
        doc = SimpleDocTemplate(buffer, pagesize=A4, 
                              rightMargin=0.75*inch, leftMargin=0.75*inch,
                              topMargin=1*inch, bottomMargin=1*inch)
        
        # Get styles
        styles = getSampleStyleSheet()
        
        # Custom styles
        title_style = ParagraphStyle(
            'CustomTitle',
            parent=styles['Heading1'],
            fontSize=24,
            spaceAfter=30,
            alignment=TA_CENTER,
        )
        
        heading_style = ParagraphStyle(
            'CustomHeading',
            parent=styles['Heading2'],
            fontSize=16,
            spaceAfter=12,
            spaceBefore=12,
        )
        
        question_style = ParagraphStyle(
            'QuestionStyle',
            parent=styles['Normal'],
            fontSize=12,
            spaceAfter=8,
            spaceBefore=8,
        )
        
        option_style = ParagraphStyle(
            'OptionStyle',
            parent=styles['Normal'],
            fontSize=11,
            leftIndent=20,
            spaceAfter=4,
        )
        
        explanation_style = ParagraphStyle(
            'ExplanationStyle',
            parent=styles['Normal'],
            fontSize=10,
            leftIndent=10,
            fontName='Helvetica-Oblique',
            spaceAfter=8,
        )
        
        story = []
        
        # Title
        story.append(Paragraph("AI Generated Quiz", title_style))
        story.append(Spacer(1, 12))
        
        # Metadata
        if quiz_metadata:
            metadata_content = []
            metadata_content.append(f"<b>Generated:</b> {quiz_metadata.get('generated_at', datetime.now().isoformat())}")
            metadata_content.append(f"<b>Total Questions:</b> {quiz_metadata.get('total_questions', len(questions))}")
            
            if quiz_metadata.get('difficulty_levels'):
                metadata_content.append(f"<b>Difficulty Levels:</b> {', '.join(quiz_metadata['difficulty_levels'])}")
            
            if quiz_metadata.get('topic'):
                metadata_content.append(f"<b>Topic:</b> {quiz_metadata['topic']}")
            
            for line in metadata_content:
                story.append(Paragraph(line, styles['Normal']))
            
            story.append(Spacer(1, 20))
        
        # Questions
        story.append(Paragraph("Questions", heading_style))
        story.append(Spacer(1, 12))
        
        for i, question in enumerate(questions, 1):
            # Question number and type
            question_header = f"<b>Question {i}</b> ({question.question_type.value.replace('_', ' ').title()})"
            story.append(Paragraph(question_header, question_style))
            
            # Question text
            story.append(Paragraph(f"<b>Q:</b> {question.question_text}", question_style))
            
            # Options based on question type
            if question.question_type == QuestionType.MULTIPLE_CHOICE and question.options:
                story.append(Paragraph("<b>Options:</b>", question_style))
                for j, option in enumerate(question.options):
                    marker = " ✓" if option.is_correct else ""
                    letter = chr(65 + j)  # A, B, C, D
                    option_text = f"{letter}) {option.text}{marker}"
                    story.append(Paragraph(option_text, option_style))
                    
            elif question.question_type == QuestionType.TRUE_FALSE:
                correct_answer = question.correct_answer or "True"
                story.append(Paragraph("<b>Options:</b>", question_style))
                story.append(Paragraph(f"A) True {'✓' if correct_answer.lower() == 'true' else ''}", option_style))
                story.append(Paragraph(f"B) False {'✓' if correct_answer.lower() == 'false' else ''}", option_style))
                
            elif question.question_type == QuestionType.OPEN_ENDED:
                if question.correct_answer:
                    story.append(Paragraph(f"<b>Sample Answer:</b> {question.correct_answer}", option_style))
            
            # Explanation
            if question.explanation:
                story.append(Paragraph(f"<b>Explanation:</b> {question.explanation}", explanation_style))
            
            story.append(Spacer(1, 16))
            
            # Page break after every 5 questions (except last)
            if i % 5 == 0 and i < len(questions):
                story.append(PageBreak())
        
        # Footer
        story.append(Spacer(1, 30))
        footer_text = """
        <para alignment="center">
        <i>Generated by AI Quiz Generator</i><br/>
        https://your-app-domain.com
        </para>
        """
        story.append(Paragraph(footer_text, styles['Normal']))
        
        try:
            doc.build(story)
            buffer.seek(0)
            return buffer.getvalue()
        except Exception as e:
            logger.error(f"Error generating PDF: {str(e)}")
            raise
        finally:
            buffer.close()
    
    @staticmethod
    def generate_answer_key_txt(questions: List[Question]) -> str:
        """Generate answer key in plain text format"""
        
        content = []
        content.append("=" * 60)
        content.append("ANSWER KEY")
        content.append("=" * 60)
        content.append("")
        
        for i, question in enumerate(questions, 1):
            content.append(f"Question {i}:")
            
            if question.question_type == QuestionType.MULTIPLE_CHOICE and question.options:
                for j, option in enumerate(question.options):
                    if option.is_correct:
                        letter = chr(65 + j)  # A, B, C, D
                        content.append(f"  Answer: {letter}) {option.text}")
                        break
                        
            elif question.question_type == QuestionType.TRUE_FALSE:
                correct_answer = question.correct_answer or "True"
                content.append(f"  Answer: {correct_answer}")
                
            elif question.question_type == QuestionType.OPEN_ENDED:
                if question.correct_answer:
                    content.append(f"  Sample Answer: {question.correct_answer}")
            
            if question.explanation:
                content.append(f"  Explanation: {question.explanation}")
            
            content.append("")
        
        return "\n".join(content)
    
    @staticmethod
    def get_filename(quiz_metadata: Dict[str, Any], file_type: str, include_answers: bool = False) -> str:
        """Generate appropriate filename for the quiz file"""
        
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        base_name = "ai_quiz"
        
        if quiz_metadata and quiz_metadata.get('topic'):
            topic = quiz_metadata['topic'].replace(' ', '_').lower()
            base_name = f"quiz_{topic}"
        
        suffix = "_with_answers" if include_answers else ""
        
        return f"{base_name}_{timestamp}{suffix}.{file_type}"